#include <sstream> // __str__
#include <string>
#include <string_view>

#include <functional>
#include <pybind11/pybind11.h>
#include <string>
#include <pybind11/stl.h>
#include "absl/status/status.h"
#include "my_sample_library/my_library.h"


#ifndef BINDER_PYBIND11_TYPE_CASTER
	#define BINDER_PYBIND11_TYPE_CASTER
	PYBIND11_DECLARE_HOLDER_TYPE(T, std::shared_ptr<T>)
	PYBIND11_DECLARE_HOLDER_TYPE(T, T*)
	PYBIND11_MAKE_OPAQUE(std::shared_ptr<void>)
#endif

void bind_std_string_view(std::function< pybind11::module &(std::string const &namespace_) > &M)
{
	{ // std::basic_string_view file:string_view line:98
		pybind11::class_<std::basic_string_view<char,std::char_traits<char>>, std::shared_ptr<std::basic_string_view<char,std::char_traits<char>>>> cl(M("std"), "basic_string_view_char_std_char_traits_char_t", "");
		cl.def( pybind11::init( [](){ return new std::basic_string_view<char,std::char_traits<char>>(); } ) );
		cl.def( pybind11::init( [](std::basic_string_view<char,std::char_traits<char>> const &o){ return new std::basic_string_view<char,std::char_traits<char>>(o); } ) );
		cl.def( pybind11::init<const char *>(), pybind11::arg("__str") );

		cl.def( pybind11::init<const char *, unsigned long>(), pybind11::arg("__str"), pybind11::arg("__len") );

		cl.def("assign", (class std::basic_string_view<char> & (std::basic_string_view<char,std::char_traits<char>>::*)(const class std::basic_string_view<char> &)) &std::basic_string_view<char>::operator=, "C++: std::basic_string_view<char>::operator=(const class std::basic_string_view<char> &) --> class std::basic_string_view<char> &", pybind11::return_value_policy::automatic, pybind11::arg(""));
		cl.def("begin", (const char * (std::basic_string_view<char,std::char_traits<char>>::*)() const) &std::basic_string_view<char>::begin, "C++: std::basic_string_view<char>::begin() const --> const char *", pybind11::return_value_policy::automatic);
		cl.def("end", (const char * (std::basic_string_view<char,std::char_traits<char>>::*)() const) &std::basic_string_view<char>::end, "C++: std::basic_string_view<char>::end() const --> const char *", pybind11::return_value_policy::automatic);
		cl.def("cbegin", (const char * (std::basic_string_view<char,std::char_traits<char>>::*)() const) &std::basic_string_view<char>::cbegin, "C++: std::basic_string_view<char>::cbegin() const --> const char *", pybind11::return_value_policy::automatic);
		cl.def("cend", (const char * (std::basic_string_view<char,std::char_traits<char>>::*)() const) &std::basic_string_view<char>::cend, "C++: std::basic_string_view<char>::cend() const --> const char *", pybind11::return_value_policy::automatic);
		cl.def("size", (unsigned long (std::basic_string_view<char,std::char_traits<char>>::*)() const) &std::basic_string_view<char>::size, "C++: std::basic_string_view<char>::size() const --> unsigned long");
		cl.def("length", (unsigned long (std::basic_string_view<char,std::char_traits<char>>::*)() const) &std::basic_string_view<char>::length, "C++: std::basic_string_view<char>::length() const --> unsigned long");
		cl.def("max_size", (unsigned long (std::basic_string_view<char,std::char_traits<char>>::*)() const) &std::basic_string_view<char>::max_size, "C++: std::basic_string_view<char>::max_size() const --> unsigned long");
		cl.def("empty", (bool (std::basic_string_view<char,std::char_traits<char>>::*)() const) &std::basic_string_view<char>::empty, "C++: std::basic_string_view<char>::empty() const --> bool");
		cl.def("__getitem__", (const char & (std::basic_string_view<char,std::char_traits<char>>::*)(unsigned long) const) &std::basic_string_view<char>::operator[], "C++: std::basic_string_view<char>::operator[](unsigned long) const --> const char &", pybind11::return_value_policy::automatic, pybind11::arg("__pos"));
		cl.def("at", (const char & (std::basic_string_view<char,std::char_traits<char>>::*)(unsigned long) const) &std::basic_string_view<char>::at, "C++: std::basic_string_view<char>::at(unsigned long) const --> const char &", pybind11::return_value_policy::automatic, pybind11::arg("__pos"));
		cl.def("front", (const char & (std::basic_string_view<char,std::char_traits<char>>::*)() const) &std::basic_string_view<char>::front, "C++: std::basic_string_view<char>::front() const --> const char &", pybind11::return_value_policy::automatic);
		cl.def("back", (const char & (std::basic_string_view<char,std::char_traits<char>>::*)() const) &std::basic_string_view<char>::back, "C++: std::basic_string_view<char>::back() const --> const char &", pybind11::return_value_policy::automatic);
		cl.def("data", (const char * (std::basic_string_view<char,std::char_traits<char>>::*)() const) &std::basic_string_view<char>::data, "C++: std::basic_string_view<char>::data() const --> const char *", pybind11::return_value_policy::automatic);
		cl.def("remove_prefix", (void (std::basic_string_view<char,std::char_traits<char>>::*)(unsigned long)) &std::basic_string_view<char>::remove_prefix, "C++: std::basic_string_view<char>::remove_prefix(unsigned long) --> void", pybind11::arg("__n"));
		cl.def("remove_suffix", (void (std::basic_string_view<char,std::char_traits<char>>::*)(unsigned long)) &std::basic_string_view<char>::remove_suffix, "C++: std::basic_string_view<char>::remove_suffix(unsigned long) --> void", pybind11::arg("__n"));
		cl.def("swap", (void (std::basic_string_view<char,std::char_traits<char>>::*)(class std::basic_string_view<char> &)) &std::basic_string_view<char>::swap, "C++: std::basic_string_view<char>::swap(class std::basic_string_view<char> &) --> void", pybind11::arg("__sv"));
		cl.def("copy", [](std::basic_string_view<char,std::char_traits<char>> const &o, char * a0, unsigned long const & a1) -> unsigned long { return o.copy(a0, a1); }, "", pybind11::arg("__str"), pybind11::arg("__n"));
		cl.def("copy", (unsigned long (std::basic_string_view<char,std::char_traits<char>>::*)(char *, unsigned long, unsigned long) const) &std::basic_string_view<char>::copy, "C++: std::basic_string_view<char>::copy(char *, unsigned long, unsigned long) const --> unsigned long", pybind11::arg("__str"), pybind11::arg("__n"), pybind11::arg("__pos"));
		cl.def("substr", [](std::basic_string_view<char,std::char_traits<char>> const &o) -> std::basic_string_view<char> { return o.substr(); }, "");
		cl.def("substr", [](std::basic_string_view<char,std::char_traits<char>> const &o, unsigned long const & a0) -> std::basic_string_view<char> { return o.substr(a0); }, "", pybind11::arg("__pos"));
		cl.def("substr", (class std::basic_string_view<char> (std::basic_string_view<char,std::char_traits<char>>::*)(unsigned long, unsigned long) const) &std::basic_string_view<char>::substr, "C++: std::basic_string_view<char>::substr(unsigned long, unsigned long) const --> class std::basic_string_view<char>", pybind11::arg("__pos"), pybind11::arg("__n"));
		cl.def("compare", (int (std::basic_string_view<char,std::char_traits<char>>::*)(class std::basic_string_view<char>) const) &std::basic_string_view<char>::compare, "C++: std::basic_string_view<char>::compare(class std::basic_string_view<char>) const --> int", pybind11::arg("__str"));
		cl.def("compare", (int (std::basic_string_view<char,std::char_traits<char>>::*)(unsigned long, unsigned long, class std::basic_string_view<char>) const) &std::basic_string_view<char>::compare, "C++: std::basic_string_view<char>::compare(unsigned long, unsigned long, class std::basic_string_view<char>) const --> int", pybind11::arg("__pos1"), pybind11::arg("__n1"), pybind11::arg("__str"));
		cl.def("compare", (int (std::basic_string_view<char,std::char_traits<char>>::*)(unsigned long, unsigned long, class std::basic_string_view<char>, unsigned long, unsigned long) const) &std::basic_string_view<char>::compare, "C++: std::basic_string_view<char>::compare(unsigned long, unsigned long, class std::basic_string_view<char>, unsigned long, unsigned long) const --> int", pybind11::arg("__pos1"), pybind11::arg("__n1"), pybind11::arg("__str"), pybind11::arg("__pos2"), pybind11::arg("__n2"));
		cl.def("compare", (int (std::basic_string_view<char,std::char_traits<char>>::*)(const char *) const) &std::basic_string_view<char>::compare, "C++: std::basic_string_view<char>::compare(const char *) const --> int", pybind11::arg("__str"));
		cl.def("compare", (int (std::basic_string_view<char,std::char_traits<char>>::*)(unsigned long, unsigned long, const char *) const) &std::basic_string_view<char>::compare, "C++: std::basic_string_view<char>::compare(unsigned long, unsigned long, const char *) const --> int", pybind11::arg("__pos1"), pybind11::arg("__n1"), pybind11::arg("__str"));
		cl.def("compare", (int (std::basic_string_view<char,std::char_traits<char>>::*)(unsigned long, unsigned long, const char *, unsigned long) const) &std::basic_string_view<char>::compare, "C++: std::basic_string_view<char>::compare(unsigned long, unsigned long, const char *, unsigned long) const --> int", pybind11::arg("__pos1"), pybind11::arg("__n1"), pybind11::arg("__str"), pybind11::arg("__n2"));
		cl.def("find", [](std::basic_string_view<char,std::char_traits<char>> const &o, class std::basic_string_view<char> const & a0) -> unsigned long { return o.find(a0); }, "", pybind11::arg("__str"));
		cl.def("find", (unsigned long (std::basic_string_view<char,std::char_traits<char>>::*)(class std::basic_string_view<char>, unsigned long) const) &std::basic_string_view<char>::find, "C++: std::basic_string_view<char>::find(class std::basic_string_view<char>, unsigned long) const --> unsigned long", pybind11::arg("__str"), pybind11::arg("__pos"));
		cl.def("find", [](std::basic_string_view<char,std::char_traits<char>> const &o, char const & a0) -> unsigned long { return o.find(a0); }, "", pybind11::arg("__c"));
		cl.def("find", (unsigned long (std::basic_string_view<char,std::char_traits<char>>::*)(char, unsigned long) const) &std::basic_string_view<char>::find, "C++: std::basic_string_view<char>::find(char, unsigned long) const --> unsigned long", pybind11::arg("__c"), pybind11::arg("__pos"));
		cl.def("find", (unsigned long (std::basic_string_view<char,std::char_traits<char>>::*)(const char *, unsigned long, unsigned long) const) &std::basic_string_view<char>::find, "C++: std::basic_string_view<char>::find(const char *, unsigned long, unsigned long) const --> unsigned long", pybind11::arg("__str"), pybind11::arg("__pos"), pybind11::arg("__n"));
		cl.def("find", [](std::basic_string_view<char,std::char_traits<char>> const &o, const char * a0) -> unsigned long { return o.find(a0); }, "", pybind11::arg("__str"));
		cl.def("find", (unsigned long (std::basic_string_view<char,std::char_traits<char>>::*)(const char *, unsigned long) const) &std::basic_string_view<char>::find, "C++: std::basic_string_view<char>::find(const char *, unsigned long) const --> unsigned long", pybind11::arg("__str"), pybind11::arg("__pos"));
		cl.def("rfind", [](std::basic_string_view<char,std::char_traits<char>> const &o, class std::basic_string_view<char> const & a0) -> unsigned long { return o.rfind(a0); }, "", pybind11::arg("__str"));
		cl.def("rfind", (unsigned long (std::basic_string_view<char,std::char_traits<char>>::*)(class std::basic_string_view<char>, unsigned long) const) &std::basic_string_view<char>::rfind, "C++: std::basic_string_view<char>::rfind(class std::basic_string_view<char>, unsigned long) const --> unsigned long", pybind11::arg("__str"), pybind11::arg("__pos"));
		cl.def("rfind", [](std::basic_string_view<char,std::char_traits<char>> const &o, char const & a0) -> unsigned long { return o.rfind(a0); }, "", pybind11::arg("__c"));
		cl.def("rfind", (unsigned long (std::basic_string_view<char,std::char_traits<char>>::*)(char, unsigned long) const) &std::basic_string_view<char>::rfind, "C++: std::basic_string_view<char>::rfind(char, unsigned long) const --> unsigned long", pybind11::arg("__c"), pybind11::arg("__pos"));
		cl.def("rfind", (unsigned long (std::basic_string_view<char,std::char_traits<char>>::*)(const char *, unsigned long, unsigned long) const) &std::basic_string_view<char>::rfind, "C++: std::basic_string_view<char>::rfind(const char *, unsigned long, unsigned long) const --> unsigned long", pybind11::arg("__str"), pybind11::arg("__pos"), pybind11::arg("__n"));
		cl.def("rfind", [](std::basic_string_view<char,std::char_traits<char>> const &o, const char * a0) -> unsigned long { return o.rfind(a0); }, "", pybind11::arg("__str"));
		cl.def("rfind", (unsigned long (std::basic_string_view<char,std::char_traits<char>>::*)(const char *, unsigned long) const) &std::basic_string_view<char>::rfind, "C++: std::basic_string_view<char>::rfind(const char *, unsigned long) const --> unsigned long", pybind11::arg("__str"), pybind11::arg("__pos"));
		cl.def("find_first_of", [](std::basic_string_view<char,std::char_traits<char>> const &o, class std::basic_string_view<char> const & a0) -> unsigned long { return o.find_first_of(a0); }, "", pybind11::arg("__str"));
		cl.def("find_first_of", (unsigned long (std::basic_string_view<char,std::char_traits<char>>::*)(class std::basic_string_view<char>, unsigned long) const) &std::basic_string_view<char>::find_first_of, "C++: std::basic_string_view<char>::find_first_of(class std::basic_string_view<char>, unsigned long) const --> unsigned long", pybind11::arg("__str"), pybind11::arg("__pos"));
		cl.def("find_first_of", [](std::basic_string_view<char,std::char_traits<char>> const &o, char const & a0) -> unsigned long { return o.find_first_of(a0); }, "", pybind11::arg("__c"));
		cl.def("find_first_of", (unsigned long (std::basic_string_view<char,std::char_traits<char>>::*)(char, unsigned long) const) &std::basic_string_view<char>::find_first_of, "C++: std::basic_string_view<char>::find_first_of(char, unsigned long) const --> unsigned long", pybind11::arg("__c"), pybind11::arg("__pos"));
		cl.def("find_first_of", (unsigned long (std::basic_string_view<char,std::char_traits<char>>::*)(const char *, unsigned long, unsigned long) const) &std::basic_string_view<char>::find_first_of, "C++: std::basic_string_view<char>::find_first_of(const char *, unsigned long, unsigned long) const --> unsigned long", pybind11::arg("__str"), pybind11::arg("__pos"), pybind11::arg("__n"));
		cl.def("find_first_of", [](std::basic_string_view<char,std::char_traits<char>> const &o, const char * a0) -> unsigned long { return o.find_first_of(a0); }, "", pybind11::arg("__str"));
		cl.def("find_first_of", (unsigned long (std::basic_string_view<char,std::char_traits<char>>::*)(const char *, unsigned long) const) &std::basic_string_view<char>::find_first_of, "C++: std::basic_string_view<char>::find_first_of(const char *, unsigned long) const --> unsigned long", pybind11::arg("__str"), pybind11::arg("__pos"));
		cl.def("find_last_of", [](std::basic_string_view<char,std::char_traits<char>> const &o, class std::basic_string_view<char> const & a0) -> unsigned long { return o.find_last_of(a0); }, "", pybind11::arg("__str"));
		cl.def("find_last_of", (unsigned long (std::basic_string_view<char,std::char_traits<char>>::*)(class std::basic_string_view<char>, unsigned long) const) &std::basic_string_view<char>::find_last_of, "C++: std::basic_string_view<char>::find_last_of(class std::basic_string_view<char>, unsigned long) const --> unsigned long", pybind11::arg("__str"), pybind11::arg("__pos"));
		cl.def("find_last_of", [](std::basic_string_view<char,std::char_traits<char>> const &o, char const & a0) -> unsigned long { return o.find_last_of(a0); }, "", pybind11::arg("__c"));
		cl.def("find_last_of", (unsigned long (std::basic_string_view<char,std::char_traits<char>>::*)(char, unsigned long) const) &std::basic_string_view<char>::find_last_of, "C++: std::basic_string_view<char>::find_last_of(char, unsigned long) const --> unsigned long", pybind11::arg("__c"), pybind11::arg("__pos"));
		cl.def("find_last_of", (unsigned long (std::basic_string_view<char,std::char_traits<char>>::*)(const char *, unsigned long, unsigned long) const) &std::basic_string_view<char>::find_last_of, "C++: std::basic_string_view<char>::find_last_of(const char *, unsigned long, unsigned long) const --> unsigned long", pybind11::arg("__str"), pybind11::arg("__pos"), pybind11::arg("__n"));
		cl.def("find_last_of", [](std::basic_string_view<char,std::char_traits<char>> const &o, const char * a0) -> unsigned long { return o.find_last_of(a0); }, "", pybind11::arg("__str"));
		cl.def("find_last_of", (unsigned long (std::basic_string_view<char,std::char_traits<char>>::*)(const char *, unsigned long) const) &std::basic_string_view<char>::find_last_of, "C++: std::basic_string_view<char>::find_last_of(const char *, unsigned long) const --> unsigned long", pybind11::arg("__str"), pybind11::arg("__pos"));
		cl.def("find_first_not_of", [](std::basic_string_view<char,std::char_traits<char>> const &o, class std::basic_string_view<char> const & a0) -> unsigned long { return o.find_first_not_of(a0); }, "", pybind11::arg("__str"));
		cl.def("find_first_not_of", (unsigned long (std::basic_string_view<char,std::char_traits<char>>::*)(class std::basic_string_view<char>, unsigned long) const) &std::basic_string_view<char>::find_first_not_of, "C++: std::basic_string_view<char>::find_first_not_of(class std::basic_string_view<char>, unsigned long) const --> unsigned long", pybind11::arg("__str"), pybind11::arg("__pos"));
		cl.def("find_first_not_of", [](std::basic_string_view<char,std::char_traits<char>> const &o, char const & a0) -> unsigned long { return o.find_first_not_of(a0); }, "", pybind11::arg("__c"));
		cl.def("find_first_not_of", (unsigned long (std::basic_string_view<char,std::char_traits<char>>::*)(char, unsigned long) const) &std::basic_string_view<char>::find_first_not_of, "C++: std::basic_string_view<char>::find_first_not_of(char, unsigned long) const --> unsigned long", pybind11::arg("__c"), pybind11::arg("__pos"));
		cl.def("find_first_not_of", (unsigned long (std::basic_string_view<char,std::char_traits<char>>::*)(const char *, unsigned long, unsigned long) const) &std::basic_string_view<char>::find_first_not_of, "C++: std::basic_string_view<char>::find_first_not_of(const char *, unsigned long, unsigned long) const --> unsigned long", pybind11::arg("__str"), pybind11::arg("__pos"), pybind11::arg("__n"));
		cl.def("find_first_not_of", [](std::basic_string_view<char,std::char_traits<char>> const &o, const char * a0) -> unsigned long { return o.find_first_not_of(a0); }, "", pybind11::arg("__str"));
		cl.def("find_first_not_of", (unsigned long (std::basic_string_view<char,std::char_traits<char>>::*)(const char *, unsigned long) const) &std::basic_string_view<char>::find_first_not_of, "C++: std::basic_string_view<char>::find_first_not_of(const char *, unsigned long) const --> unsigned long", pybind11::arg("__str"), pybind11::arg("__pos"));
		cl.def("find_last_not_of", [](std::basic_string_view<char,std::char_traits<char>> const &o, class std::basic_string_view<char> const & a0) -> unsigned long { return o.find_last_not_of(a0); }, "", pybind11::arg("__str"));
		cl.def("find_last_not_of", (unsigned long (std::basic_string_view<char,std::char_traits<char>>::*)(class std::basic_string_view<char>, unsigned long) const) &std::basic_string_view<char>::find_last_not_of, "C++: std::basic_string_view<char>::find_last_not_of(class std::basic_string_view<char>, unsigned long) const --> unsigned long", pybind11::arg("__str"), pybind11::arg("__pos"));
		cl.def("find_last_not_of", [](std::basic_string_view<char,std::char_traits<char>> const &o, char const & a0) -> unsigned long { return o.find_last_not_of(a0); }, "", pybind11::arg("__c"));
		cl.def("find_last_not_of", (unsigned long (std::basic_string_view<char,std::char_traits<char>>::*)(char, unsigned long) const) &std::basic_string_view<char>::find_last_not_of, "C++: std::basic_string_view<char>::find_last_not_of(char, unsigned long) const --> unsigned long", pybind11::arg("__c"), pybind11::arg("__pos"));
		cl.def("find_last_not_of", (unsigned long (std::basic_string_view<char,std::char_traits<char>>::*)(const char *, unsigned long, unsigned long) const) &std::basic_string_view<char>::find_last_not_of, "C++: std::basic_string_view<char>::find_last_not_of(const char *, unsigned long, unsigned long) const --> unsigned long", pybind11::arg("__str"), pybind11::arg("__pos"), pybind11::arg("__n"));
		cl.def("find_last_not_of", [](std::basic_string_view<char,std::char_traits<char>> const &o, const char * a0) -> unsigned long { return o.find_last_not_of(a0); }, "", pybind11::arg("__str"));
		cl.def("find_last_not_of", (unsigned long (std::basic_string_view<char,std::char_traits<char>>::*)(const char *, unsigned long) const) &std::basic_string_view<char>::find_last_not_of, "C++: std::basic_string_view<char>::find_last_not_of(const char *, unsigned long) const --> unsigned long", pybind11::arg("__str"), pybind11::arg("__pos"));
	}
}
